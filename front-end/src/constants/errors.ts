export class MyError extends Error {
  constructor(message: string) {
    super(message);
    this.name = "MyError";
  }
}

export enum Errors {
  INVALID_SETUP = "Set up environment variables correctly",
  NOT_CREATE_STOCK = "Could not create stock",
  NOT_CREATE_STOCK_DB = "Could not create stock in DB",
  NOT_CREATE_STOCK_TOKEN = "Could not create stock token",
  INVALID_SYMBOL = "Stock symbol must be a string of at most 9 characters",
  INVALID_NAME = "Stock name must be a string",
  INVALID_STOCK_ID = "Stock id must be a string",
  NOT_GET_STOCKS = "Could not get stocks",
  NOT_GET_STOCKS_DB = "Could not get stocks from db",
  NOT_GET_STOCK_PRICES = "Could not get stock prices",
  NOT_GET_SAFARICOM_TOKEN = "Could not get access token from safaricom",
  INVALID_AMOUNT = "Amount must be greater than 0 and whole",
  INVALID_PHONE_NUMBER = "Phone number is invalid",
  INVALID_SELL_PRICE = "Sell price must be greater than 0",
  NOT_SEND_STK_PUSH = "Could not send STK Push",
  NOT_GET_STOCK_PRICES_DB = "Could not get stock prices from db",
  NOT_UPDATE_STOCK_PRICES_DB = "Could not update stock prices in db",
  INVALID_BUY_PRICE = "Buy price must be greater than 0",
  NOT_STORE_STOCK_PURCHASE = "Could not store stock purchase",
  NOT_STORE_STOCK_PURCHASE_DB = "Could not store stock purchase on db",
  INVALID_WALLET = "Wallet must be 42 characters long",
  NOT_MAKE_PAYMENT_REQUEST = "Could not make paystack payment request",
  NOT_GET_RECEPIENT_CODE = "Could not get recepient code",
  NOT_GET_TRANSFER_REFERENCE = "Could not get transfer reference",
  NOT_CHECK_USER_STOCKS_DB = "Could not get user stocks from db",
  NOT_CREATE_NEW_USER_STOCKS_DB = "Could not record new user entry in user stocks",
  NOT_CREATE_NEW_RECORD_SELL = "Canot create a new user entry for sell",
  CANNOT_SELL_MORE_THAN_OWNED = "Cannot sell more than is owned",
  NOT_CREATE_NEW_STOCK_RECORD_SELL = "Cannot add a new stock to user if its a sell",
  NOT_REPLACE_USER_STOCK = "Could not replace user stock record",
  NOT_UPDATE_USER_STOCKS = "Could not update record of stocks user owns",
  NOT_GET_USER_STOCKS = "Could not get stocks owned by user",
  NOT_GET_USER_TRANSACTIONS = "Could not get user's transactions",
  MUST_STOCKS_SELL = "User must have owned stocks to sell",
  TOO_MANY_SELL = "Too many stocks sold in user history",
  NOT_NOTIFY = "Could not notify",
  INVALID_FROM_TO_DATE = "From date must be after to date",
  NOT_GET_GRAPH_DATA = "Could not get graph data",
  NOT_UPDATE_PURCHASE_STATUS_DB = "Could not update sale status in db",
  NOT_GET_MPESA_PAYMENT = "Could not get payment from mpesa request id",
  NOT_GET_STOCK_DB = "Could not get stock from DB",
  STOCK_NOT_EXIST = "Stock does not exist",
  NOT_TRANSFER_HBAR = "Could not transfer hbar",
  NOT_GET_USER_OWN_STOCK = "Could not get if user owns stock",
  NOT_GET_REFERENCE_CODE_PAYSTACK = "Could not reference code from paystack",
  NOT_SEND_TOKENS_USER = "Could not send tokens to user",
  NOT_GET_PRICES = "Could not get prices of stocks over time",
  NOT_GET_ASSOCIATION_HEDERA = "Could not get token association from hedera",
  UNKNOWN = "Unkown error",
}
