{
  "version": "3.4",
  "log": [
    {
      "@openzeppelin/contracts/access/AccessControl.sol:AccessControl": {
        "src": "@openzeppelin\\contracts\\access\\AccessControl.sol:49",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_roles",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)22_storage)",
              "contract": "AccessControl",
              "src": "@openzeppelin\\contracts\\access\\AccessControl.sol:55"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)22_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)22_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "hasRole",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl": {
        "src": "@openzeppelin\\contracts\\access\\IAccessControl.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/interfaces/IERC1363.sol:IERC1363": {
        "src": "@openzeppelin\\contracts\\interfaces\\IERC1363.sol:16",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "transferAndCall(address,uint256)",
          "transferAndCall(address,uint256,bytes)",
          "transferFromAndCall(address,address,uint256)",
          "transferFromAndCall(address,address,uint256,bytes)",
          "approveAndCall(address,uint256)",
          "approveAndCall(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC1155Errors": {
        "src": "@openzeppelin\\contracts\\interfaces\\draft-IERC6093.sol:113",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors": {
        "src": "@openzeppelin\\contracts\\interfaces\\draft-IERC6093.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors": {
        "src": "@openzeppelin\\contracts\\interfaces\\draft-IERC6093.sol:55",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:29",
        "inherit": [
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:44"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:30"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:32"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:34"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:36"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:37"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol:ERC20Burnable": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\ERC20Burnable.sol:14",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:30"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:32"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:34"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:36"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:37"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol:ERC20Pausable": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\ERC20Pausable.sol:22",
        "inherit": [
          "@openzeppelin/contracts/utils/Pausable.sol:Pausable",
          "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:30"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:32"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:34"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:36"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:37"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "5",
              "type": "t_bool",
              "contract": "Pausable",
              "src": "@openzeppelin\\contracts\\utils\\Pausable.sol:18"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\IERC20Metadata.sol:11",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\utils\\SafeERC20.sol:18",
        "version": {
          "withMetadata": "f3e572ce7dd7d025a62c920c3dcf2c24b61ff4cae2c03d0479bc1ab3b4167c30",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin\\contracts\\utils\\Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/utils/Panic.sol:Panic": {
        "src": "@openzeppelin\\contracts\\utils\\Panic.sol:26",
        "version": {
          "withMetadata": "ac2608c1fb0048b650999506962e45cdc79c28b0e55bb11d32e53125bff76d4f",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/utils/Pausable.sol:Pausable": {
        "src": "@openzeppelin\\contracts\\utils\\Pausable.sol:17",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_paused",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "Pausable",
              "src": "@openzeppelin\\contracts\\utils\\Pausable.sol:18"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/utils/ReentrancyGuard.sol:ReentrancyGuard": {
        "src": "@openzeppelin\\contracts\\utils\\ReentrancyGuard.sol:25",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "@openzeppelin\\contracts\\utils\\ReentrancyGuard.sol:47"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_status",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "@openzeppelin\\contracts\\utils\\ReentrancyGuard.sol:40"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165": {
        "src": "@openzeppelin\\contracts\\utils\\introspection\\ERC165.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "@openzeppelin\\contracts\\utils\\introspection\\IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/utils/math/Math.sol:Math": {
        "src": "@openzeppelin\\contracts\\utils\\math\\Math.sol:12",
        "version": {
          "withMetadata": "bf31de812fa64e40469263b262dd2512a83a176980539d8efe73b20ad9836d1b",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/SafeCast.sol:SafeCast",
          "@openzeppelin/contracts/utils/math/Math.sol:Math",
          "@openzeppelin/contracts/utils/Panic.sol:Panic"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/utils/math/SafeCast.sol:SafeCast": {
        "src": "@openzeppelin\\contracts\\utils\\math\\SafeCast.sol:19",
        "version": {
          "withMetadata": "e5f81efb76772d9e7054294b4308ea2b7739ee1f37ac529d518eda678fa30c88",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "contracts/NGNStablecoin.sol:NGNStablecoin": {
        "src": "contracts\\NGNStablecoin.sol:27",
        "version": {
          "withMetadata": "f539223cc80212ef7436fca424e3af6ed3cb61d347f084cdde3e1b73a62baa10",
          "withoutMetadata": "f539223cc80212ef7436fca424e3af6ed3cb61d347f084cdde3e1b73a62baa10",
          "linkedWithoutMetadata": "f539223cc80212ef7436fca424e3af6ed3cb61d347f084cdde3e1b73a62baa10"
        },
        "inherit": [
          "@openzeppelin/contracts/utils/ReentrancyGuard.sol:ReentrancyGuard",
          "@openzeppelin/contracts/access/AccessControl.sol:AccessControl",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl",
          "@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol:ERC20Pausable",
          "@openzeppelin/contracts/utils/Pausable.sol:Pausable",
          "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol:ERC20Burnable",
          "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(address,(string,string,uint8,uint256,uint256,uint256,uint256,bool,bool,bool))",
          "mint(address,uint256)",
          "batchMint(address[],uint256[])",
          "burnFrom(address,uint256)",
          "pause()",
          "unpause()",
          "updateConfig((string,string,uint8,uint256,uint256,uint256,uint256,bool,bool,bool))",
          "setTransferLimits(uint256,uint256,uint256)",
          "setComplianceStatus(address[],bool[],bool[])",
          "authorizeDEXContracts(address[],bool[])",
          "setDEXTransferLimit(uint256)",
          "setTransferCooldown(uint256)",
          "setWhitelistRequired(bool)",
          "getConfig()",
          "getRemainingMintingCapacity()",
          "getRemainingDailyTransferCapacity(address)",
          "canTransfer(address,address,uint256)",
          "emergencyWithdraw(address,uint256)",
          "()",
          "getTokenInfo()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NGNStablecoin",
            "src": "contracts\\NGNStablecoin.sol:115"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:30"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:32"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:34"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:36"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:37"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "5",
              "type": "t_bool",
              "contract": "Pausable",
              "src": "@openzeppelin\\contracts\\utils\\Pausable.sol:18"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)22_storage)",
              "contract": "AccessControl",
              "src": "@openzeppelin\\contracts\\access\\AccessControl.sol:55"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "@openzeppelin\\contracts\\utils\\ReentrancyGuard.sol:40"
            },
            {
              "label": "config",
              "offset": 0,
              "slot": "8",
              "type": "t_struct(StablecoinConfig)5521_storage",
              "contract": "NGNStablecoin",
              "src": "contracts\\NGNStablecoin.sol:56"
            },
            {
              "label": "blacklisted",
              "offset": 0,
              "slot": "16",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "NGNStablecoin",
              "src": "contracts\\NGNStablecoin.sol:59"
            },
            {
              "label": "whitelisted",
              "offset": 0,
              "slot": "17",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "NGNStablecoin",
              "src": "contracts\\NGNStablecoin.sol:60"
            },
            {
              "label": "lastTransferTime",
              "offset": 0,
              "slot": "18",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "NGNStablecoin",
              "src": "contracts\\NGNStablecoin.sol:61"
            },
            {
              "label": "dailyTransferAmount",
              "offset": 0,
              "slot": "19",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "NGNStablecoin",
              "src": "contracts\\NGNStablecoin.sol:62"
            },
            {
              "label": "lastDailyReset",
              "offset": 0,
              "slot": "20",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "NGNStablecoin",
              "src": "contracts\\NGNStablecoin.sol:63"
            },
            {
              "label": "maxTransferAmount",
              "offset": 0,
              "slot": "21",
              "type": "t_uint256",
              "contract": "NGNStablecoin",
              "src": "contracts\\NGNStablecoin.sol:66"
            },
            {
              "label": "minTransferAmount",
              "offset": 0,
              "slot": "22",
              "type": "t_uint256",
              "contract": "NGNStablecoin",
              "src": "contracts\\NGNStablecoin.sol:67"
            },
            {
              "label": "dailyTransferLimit",
              "offset": 0,
              "slot": "23",
              "type": "t_uint256",
              "contract": "NGNStablecoin",
              "src": "contracts\\NGNStablecoin.sol:68"
            },
            {
              "label": "transferCooldown",
              "offset": 0,
              "slot": "24",
              "type": "t_uint256",
              "contract": "NGNStablecoin",
              "src": "contracts\\NGNStablecoin.sol:69"
            },
            {
              "label": "whitelistRequired",
              "offset": 0,
              "slot": "25",
              "type": "t_bool",
              "contract": "NGNStablecoin",
              "src": "contracts\\NGNStablecoin.sol:70"
            },
            {
              "label": "authorizedDEXContracts",
              "offset": 0,
              "slot": "26",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "NGNStablecoin",
              "src": "contracts\\NGNStablecoin.sol:73"
            },
            {
              "label": "dexTransferLimit",
              "offset": 0,
              "slot": "27",
              "type": "t_uint256",
              "contract": "NGNStablecoin",
              "src": "contracts\\NGNStablecoin.sol:74"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)22_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)22_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "hasRole",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(StablecoinConfig)5521_storage": {
              "label": "struct NGNStablecoin.StablecoinConfig",
              "members": [
                {
                  "label": "name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "symbol",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "decimals",
                  "type": "t_uint8",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "maxSupply",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "mintingCap",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "lastMintReset",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "currentDayMinted",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "mintingEnabled",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "burningEnabled",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "7"
                },
                {
                  "label": "transfersEnabled",
                  "type": "t_bool",
                  "offset": 2,
                  "slot": "7"
                }
              ],
              "numberOfBytes": "256"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "contracts/NigerianStockToken.sol:NigerianStockToken": {
        "src": "contracts\\NigerianStockToken.sol:16",
        "version": {
          "withMetadata": "d6193f49f3c99be8013a57f45da4c5ed4e4aaf25c8a78958041b4879e2a0c7a9",
          "withoutMetadata": "d6193f49f3c99be8013a57f45da4c5ed4e4aaf25c8a78958041b4879e2a0c7a9",
          "linkedWithoutMetadata": "d6193f49f3c99be8013a57f45da4c5ed4e4aaf25c8a78958041b4879e2a0c7a9"
        },
        "inherit": [
          "@openzeppelin/contracts/utils/ReentrancyGuard.sol:ReentrancyGuard",
          "@openzeppelin/contracts/access/AccessControl.sol:AccessControl",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl",
          "@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol:ERC20Pausable",
          "@openzeppelin/contracts/utils/Pausable.sol:Pausable",
          "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol:ERC20Burnable",
          "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256,(string,string,string,uint256,uint256,bool,uint256),address)",
          "batchTransfer(address[],uint256[])",
          "mint(address,uint256)",
          "burnFrom(address,uint256)",
          "pause()",
          "unpause()",
          "updateStockMetadata((string,string,string,uint256,uint256,bool,uint256))",
          "setTransferLimits(uint256,uint256)",
          "setBlacklist(address,bool)",
          "setTransferCooldown(uint256)",
          "emergencyWithdraw(address,uint256)",
          "getStockInfo()",
          "hasRole(bytes32,address)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NigerianStockToken",
            "src": "contracts\\NigerianStockToken.sol:80"
          },
          {
            "kind": "state-variable-assignment",
            "name": "transferCooldown",
            "src": "contracts\\NigerianStockToken.sol:48"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:30"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:32"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:34"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:36"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:37"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "5",
              "type": "t_bool",
              "contract": "Pausable",
              "src": "@openzeppelin\\contracts\\utils\\Pausable.sol:18"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)22_storage)",
              "contract": "AccessControl",
              "src": "@openzeppelin\\contracts\\access\\AccessControl.sol:55"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "@openzeppelin\\contracts\\utils\\ReentrancyGuard.sol:40"
            },
            {
              "label": "stockInfo",
              "offset": 0,
              "slot": "8",
              "type": "t_struct(StockMetadata)7060_storage",
              "contract": "NigerianStockToken",
              "src": "contracts\\NigerianStockToken.sol:41"
            },
            {
              "label": "maxTransferAmount",
              "offset": 0,
              "slot": "15",
              "type": "t_uint256",
              "contract": "NigerianStockToken",
              "src": "contracts\\NigerianStockToken.sol:44"
            },
            {
              "label": "minTransferAmount",
              "offset": 0,
              "slot": "16",
              "type": "t_uint256",
              "contract": "NigerianStockToken",
              "src": "contracts\\NigerianStockToken.sol:45"
            },
            {
              "label": "blacklisted",
              "offset": 0,
              "slot": "17",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "NigerianStockToken",
              "src": "contracts\\NigerianStockToken.sol:46"
            },
            {
              "label": "lastTransferTime",
              "offset": 0,
              "slot": "18",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "NigerianStockToken",
              "src": "contracts\\NigerianStockToken.sol:47"
            },
            {
              "label": "transferCooldown",
              "offset": 0,
              "slot": "19",
              "type": "t_uint256",
              "contract": "NigerianStockToken",
              "src": "contracts\\NigerianStockToken.sol:48"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)22_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)22_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "hasRole",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(StockMetadata)7060_storage": {
              "label": "struct NigerianStockToken.StockMetadata",
              "members": [
                {
                  "label": "symbol",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "companyName",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "sector",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "totalShares",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "marketCap",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "isActive",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "lastUpdated",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "contracts/NigerianStockTokenFactory.sol:NigerianStockTokenFactory": {
        "src": "contracts\\NigerianStockTokenFactory.sol:14",
        "version": {
          "withMetadata": "0da07e8dea55e8e951458ad4389e72fe5c82b02196390fb943194d5c7b68d2f2",
          "withoutMetadata": "0da07e8dea55e8e951458ad4389e72fe5c82b02196390fb943194d5c7b68d2f2",
          "linkedWithoutMetadata": "0da07e8dea55e8e951458ad4389e72fe5c82b02196390fb943194d5c7b68d2f2"
        },
        "inherit": [
          "@openzeppelin/contracts/utils/Pausable.sol:Pausable",
          "@openzeppelin/contracts/utils/ReentrancyGuard.sol:ReentrancyGuard",
          "@openzeppelin/contracts/access/AccessControl.sol:AccessControl",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "deployStockToken(string,string,uint256,(string,string,string,uint256,uint256,bool,uint256),address)",
          "batchDeployStockTokens(struct NigerianStockTokenFactory.TokenDeploymentData[])",
          "getTokenAddress(string)",
          "getAllDeployedSymbols()",
          "getTokenInfo(string)",
          "updateTokenMarketCap(string,uint256)",
          "pause()",
          "unpause()",
          "getFactoryStats()",
          "isValidToken(address)",
          "removeTokenFromRegistry(string)",
          "getDeployedTokensPaginated(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NigerianStockTokenFactory",
            "src": "contracts\\NigerianStockTokenFactory.sol:52"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_roles",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)22_storage)",
              "contract": "AccessControl",
              "src": "@openzeppelin\\contracts\\access\\AccessControl.sol:55"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "@openzeppelin\\contracts\\utils\\ReentrancyGuard.sol:40"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "2",
              "type": "t_bool",
              "contract": "Pausable",
              "src": "@openzeppelin\\contracts\\utils\\Pausable.sol:18"
            },
            {
              "label": "stockTokens",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_string_memory_ptr,t_address)",
              "contract": "NigerianStockTokenFactory",
              "src": "contracts\\NigerianStockTokenFactory.sol:21"
            },
            {
              "label": "isValidStockToken",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "NigerianStockTokenFactory",
              "src": "contracts\\NigerianStockTokenFactory.sol:22"
            },
            {
              "label": "deployedSymbols",
              "offset": 0,
              "slot": "5",
              "type": "t_array(t_string_storage)dyn_storage",
              "contract": "NigerianStockTokenFactory",
              "src": "contracts\\NigerianStockTokenFactory.sol:23"
            },
            {
              "label": "totalDeployedTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "NigerianStockTokenFactory",
              "src": "contracts\\NigerianStockTokenFactory.sol:26"
            },
            {
              "label": "totalMarketCap",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "NigerianStockTokenFactory",
              "src": "contracts\\NigerianStockTokenFactory.sol:27"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_string_storage)dyn_storage": {
              "label": "string[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)22_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_string_memory_ptr,t_address)": {
              "label": "mapping(string => address)",
              "numberOfBytes": "32"
            },
            "t_string_memory_ptr": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)22_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "hasRole",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "contracts/StockNGNDEX.sol:StockNGNDEX": {
        "src": "contracts\\StockNGNDEX.sol:28",
        "version": {
          "withMetadata": "7012d52653eac55b26be5ad751e9e56445ae856670e93b04390ba5e926a87d0f",
          "withoutMetadata": "7012d52653eac55b26be5ad751e9e56445ae856670e93b04390ba5e926a87d0f",
          "linkedWithoutMetadata": "7012d52653eac55b26be5ad751e9e56445ae856670e93b04390ba5e926a87d0f"
        },
        "inherit": [
          "@openzeppelin/contracts/utils/Pausable.sol:Pausable",
          "@openzeppelin/contracts/utils/ReentrancyGuard.sol:ReentrancyGuard",
          "@openzeppelin/contracts/access/AccessControl.sol:AccessControl",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20",
          "@openzeppelin/contracts/utils/math/Math.sol:Math"
        ],
        "methods": [
          "(address,address,(uint256,uint256,uint256,uint256,bool))",
          "createTradingPair(address,uint256,uint256,uint256)",
          "swapNGNForStock(address,uint256,uint256,uint256)",
          "swapStockForNGN(address,uint256,uint256,uint256)",
          "addLiquidity(address,uint256,uint256,uint256)",
          "removeLiquidity(address,uint256,uint256,uint256)",
          "getQuoteNGNToStock(address,uint256)",
          "getQuoteStockToNGN(address,uint256)",
          "getCurrentPrice(address)",
          "getPriceHistory(address)",
          "getTradingPair(address)",
          "getLiquidityPosition(address,address)",
          "getAllStockTokens()",
          "getDEXStats()",
          "updateDEXConfig((uint256,uint256,uint256,uint256,bool))",
          "updateTradingPair(address,uint256,uint256,bool)",
          "withdrawFees(address,address)",
          "pause()",
          "unpause()",
          "emergencyWithdraw(address,uint256,address)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "StockNGNDEX",
            "src": "contracts\\StockNGNDEX.sol:145"
          },
          {
            "kind": "state-variable-immutable",
            "name": "ngnToken",
            "src": "contracts\\StockNGNDEX.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_roles",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)22_storage)",
              "contract": "AccessControl",
              "src": "@openzeppelin\\contracts\\access\\AccessControl.sol:55"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "@openzeppelin\\contracts\\utils\\ReentrancyGuard.sol:40"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "2",
              "type": "t_bool",
              "contract": "Pausable",
              "src": "@openzeppelin\\contracts\\utils\\Pausable.sol:18"
            },
            {
              "label": "config",
              "offset": 0,
              "slot": "3",
              "type": "t_struct(DEXConfig)8584_storage",
              "contract": "StockNGNDEX",
              "src": "contracts\\StockNGNDEX.sol:71"
            },
            {
              "label": "tradingPairs",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(TradingPair)8562_storage)",
              "contract": "StockNGNDEX",
              "src": "contracts\\StockNGNDEX.sol:74"
            },
            {
              "label": "liquidityPositions",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_mapping(t_address,t_struct(LiquidityPosition)8573_storage))",
              "contract": "StockNGNDEX",
              "src": "contracts\\StockNGNDEX.sol:75"
            },
            {
              "label": "supportedStockTokens",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "StockNGNDEX",
              "src": "contracts\\StockNGNDEX.sol:76"
            },
            {
              "label": "allStockTokens",
              "offset": 0,
              "slot": "11",
              "type": "t_array(t_address)dyn_storage",
              "contract": "StockNGNDEX",
              "src": "contracts\\StockNGNDEX.sol:77"
            },
            {
              "label": "collectedFees",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "StockNGNDEX",
              "src": "contracts\\StockNGNDEX.sol:80"
            },
            {
              "label": "totalFeesCollected",
              "offset": 0,
              "slot": "13",
              "type": "t_uint256",
              "contract": "StockNGNDEX",
              "src": "contracts\\StockNGNDEX.sol:81"
            },
            {
              "label": "lastPrice",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "StockNGNDEX",
              "src": "contracts\\StockNGNDEX.sol:84"
            },
            {
              "label": "priceHistory",
              "offset": 0,
              "slot": "15",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "contract": "StockNGNDEX",
              "src": "contracts\\StockNGNDEX.sol:85"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_struct(LiquidityPosition)8573_storage))": {
              "label": "mapping(address => mapping(address => struct StockNGNDEX.LiquidityPosition))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(LiquidityPosition)8573_storage)": {
              "label": "mapping(address => struct StockNGNDEX.LiquidityPosition)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(TradingPair)8562_storage)": {
              "label": "mapping(address => struct StockNGNDEX.TradingPair)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)22_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)",
              "numberOfBytes": "32"
            },
            "t_struct(DEXConfig)8584_storage": {
              "label": "struct StockNGNDEX.DEXConfig",
              "members": [
                {
                  "label": "defaultFeeRate",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "maxPriceImpact",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "minLiquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "swapDeadline",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "emergencyMode",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(LiquidityPosition)8573_storage": {
              "label": "struct StockNGNDEX.LiquidityPosition",
              "members": [
                {
                  "label": "ngnAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "stockAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "liquidityTokens",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "timestamp",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(RoleData)22_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "hasRole",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(TradingPair)8562_storage": {
              "label": "struct StockNGNDEX.TradingPair",
              "members": [
                {
                  "label": "stockToken",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "ngnReserve",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "stockReserve",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "totalLiquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "feeRate",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "isActive",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "lastUpdateTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "priceImpactLimit",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "7"
                }
              ],
              "numberOfBytes": "256"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "contracts/TradingPairManager.sol:TradingPairManager": {
        "src": "contracts\\TradingPairManager.sol:27",
        "version": {
          "withMetadata": "696db5b8ffdc33a64583c330fb7f74f5d914db51c025a21588aa94ce8e03cd24",
          "withoutMetadata": "696db5b8ffdc33a64583c330fb7f74f5d914db51c025a21588aa94ce8e03cd24",
          "linkedWithoutMetadata": "696db5b8ffdc33a64583c330fb7f74f5d914db51c025a21588aa94ce8e03cd24"
        },
        "inherit": [
          "@openzeppelin/contracts/utils/Pausable.sol:Pausable",
          "@openzeppelin/contracts/utils/ReentrancyGuard.sol:ReentrancyGuard",
          "@openzeppelin/contracts/access/AccessControl.sol:AccessControl",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address,(uint256,uint256,uint256,uint256,bool,uint256))",
          "createManagedPair(address,uint256,uint256,uint256,uint256)",
          "batchCreatePairs(address[],uint256[],uint256[],uint256[],uint256[])",
          "updateManagedPair(address,bool,uint256,uint256,bool)",
          "rebalanceLiquidity(address)",
          "batchRebalance(address[])",
          "addNetworkConfig(uint256,string,address,uint256,uint256)",
          "getManagedPair(address)",
          "getAllManagedTokens()",
          "getTokenBySymbol(string)",
          "getManagerStats()",
          "getSupportedNetworks()",
          "getNetworkConfig(uint256)",
          "needsRebalancing(address)",
          "updateConfig((uint256,uint256,uint256,uint256,bool,uint256))",
          "setRebalanceThreshold(address,uint256)",
          "pause()",
          "unpause()",
          "emergencyWithdraw(address,uint256,address)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TradingPairManager",
            "src": "contracts\\TradingPairManager.sol:133"
          },
          {
            "kind": "state-variable-immutable",
            "name": "ngnToken",
            "src": "contracts\\TradingPairManager.sol:35"
          },
          {
            "kind": "state-variable-immutable",
            "name": "dexContract",
            "src": "contracts\\TradingPairManager.sol:36"
          },
          {
            "kind": "state-variable-immutable",
            "name": "stockFactory",
            "src": "contracts\\TradingPairManager.sol:37"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_roles",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)22_storage)",
              "contract": "AccessControl",
              "src": "@openzeppelin\\contracts\\access\\AccessControl.sol:55"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "@openzeppelin\\contracts\\utils\\ReentrancyGuard.sol:40"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "2",
              "type": "t_bool",
              "contract": "Pausable",
              "src": "@openzeppelin\\contracts\\utils\\Pausable.sol:18"
            },
            {
              "label": "managedPairs",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_struct(ManagedPair)10574_storage)",
              "contract": "TradingPairManager",
              "src": "contracts\\TradingPairManager.sol:65"
            },
            {
              "label": "symbolToToken",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_string_memory_ptr,t_address)",
              "contract": "TradingPairManager",
              "src": "contracts\\TradingPairManager.sol:66"
            },
            {
              "label": "allManagedTokens",
              "offset": 0,
              "slot": "5",
              "type": "t_array(t_address)dyn_storage",
              "contract": "TradingPairManager",
              "src": "contracts\\TradingPairManager.sol:67"
            },
            {
              "label": "networkConfigs",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_uint256,t_struct(NetworkConfig)10587_storage)",
              "contract": "TradingPairManager",
              "src": "contracts\\TradingPairManager.sol:70"
            },
            {
              "label": "supportedChainIds",
              "offset": 0,
              "slot": "7",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "TradingPairManager",
              "src": "contracts\\TradingPairManager.sol:71"
            },
            {
              "label": "liquidityTargets",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "TradingPairManager",
              "src": "contracts\\TradingPairManager.sol:74"
            },
            {
              "label": "rebalanceThresholds",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "TradingPairManager",
              "src": "contracts\\TradingPairManager.sol:75"
            },
            {
              "label": "totalManagedPairs",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "TradingPairManager",
              "src": "contracts\\TradingPairManager.sol:78"
            },
            {
              "label": "totalLiquidityManaged",
              "offset": 0,
              "slot": "11",
              "type": "t_uint256",
              "contract": "TradingPairManager",
              "src": "contracts\\TradingPairManager.sol:79"
            },
            {
              "label": "totalVolumeProcessed",
              "offset": 0,
              "slot": "12",
              "type": "t_uint256",
              "contract": "TradingPairManager",
              "src": "contracts\\TradingPairManager.sol:80"
            },
            {
              "label": "config",
              "offset": 0,
              "slot": "13",
              "type": "t_struct(ManagerConfig)10634_storage",
              "contract": "TradingPairManager",
              "src": "contracts\\TradingPairManager.sol:92"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(ManagedPair)10574_storage)": {
              "label": "mapping(address => struct TradingPairManager.ManagedPair)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)22_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_string_memory_ptr,t_address)": {
              "label": "mapping(string => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(NetworkConfig)10587_storage)": {
              "label": "mapping(uint256 => struct TradingPairManager.NetworkConfig)",
              "numberOfBytes": "32"
            },
            "t_string_memory_ptr": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(ManagedPair)10574_storage": {
              "label": "struct TradingPairManager.ManagedPair",
              "members": [
                {
                  "label": "stockToken",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "symbol",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "companyName",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "isActive",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "createdAt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "initialNGNLiquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "initialStockLiquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "feeRate",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "targetLiquidityNGN",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "autoRebalance",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "9"
                },
                {
                  "label": "lastRebalance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "10"
                }
              ],
              "numberOfBytes": "352"
            },
            "t_struct(ManagerConfig)10634_storage": {
              "label": "struct TradingPairManager.ManagerConfig",
              "members": [
                {
                  "label": "defaultFeeRate",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "defaultLiquidityTarget",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "defaultRebalanceThreshold",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "maxPairsPerBatch",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "autoLiquidityEnabled",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "emergencyWithdrawDelay",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_struct(NetworkConfig)10587_storage": {
              "label": "struct TradingPairManager.NetworkConfig",
              "members": [
                {
                  "label": "chainId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "networkName",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "factoryAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "isSupported",
                  "type": "t_bool",
                  "offset": 20,
                  "slot": "2"
                },
                {
                  "label": "gasLimit",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "maxSlippage",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(RoleData)22_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "hasRole",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      }
    }
  ]
}